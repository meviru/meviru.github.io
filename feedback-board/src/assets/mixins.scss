// --------------------------------------------------
// Box sizing mixin
// --------------------------------------------------
@mixin box-sizing($type) {
  -webkit-box-sizing: $type;
  box-sizing: $type;
}

// --------------------------------------------------
// transition mixin
// --------------------------------------------------
@mixin transition($value...) {
  -webkit-transition: $value;
  -o-transition: $value;
  transition: $value;
}

// --------------------------------------------------
// transform mixin
// --------------------------------------------------
@mixin transform($value...) {
  -webkit-transform: $value;
  -ms-transform: $value;
  transform: $value;
}

@mixin gradient {
  background: $gradient-bg-fb;
  background: -webkit-gradient(
    linear,
    left top,
    right top,
    from($gradient-bg-fb),
    color-stop(33%, $gradient-bg-1),
    color-stop(65%, $gradient-bg-2),
    to($gradient-bg-3)
  );
  background: -o-linear-gradient(left, $gradient-list);
  background: linear-gradient(90deg, $gradient-list);
}

// --------------------------------------------------
// Flexbox SASS mixins
// --------------------------------------------------

// Flexbox display
@mixin flexbox {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
}

// Inline flex display
@mixin inline-flex {
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

// The 'flex' shorthand
// <positive-number>, initial, auto, or none
@mixin flex($fg: 1, $fs: 0, $fb: auto) {
  // Set a variable to be used by box-flex properties
  $fg-boxflex: $fg;

  // Box-Flex only supports a flex-grow value so lets grab the
  // first item in the list and just return that.
  @if type-of($fg) == "list" {
    $fg-boxflex: nth($fg, 1);
  }

  -webkit-box-flex: $fg-boxflex;
  -ms-flex: $fg $fs $fb;
  flex: $fg $fs $fb;
}

// Flex Flow Direction
// row (default) | row-reverse | column | column-reverse
@mixin flex-direction($direction: row) {
  @if $direction == row-reverse {
    -webkit-box-orient: horizontal;
    -webkit-box-direction: reverse;
  } @else if $direction == column {
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
  } @else if $direction == column-reverse {
    -webkit-box-orient: vertical;
    -webkit-box-direction: reverse;
  } @else {
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
  }
  -ms-flex-direction: $direction;
  flex-direction: $direction;
}

// Flex Line Wrapping
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($value: nowrap) {
  -ms-flex-wrap: $value;
  flex-wrap: $value;
}

// Axis Alignment
// flex-start | flex-end | center | space-between | space-around
@mixin justify-content($value: flex-start) {
  @if $value == flex-start {
    -webkit-box-pack: start;
    -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
  } @else if $value == space-around {
    -ms-flex-pack: distribute;
  } @else {
    -webkit-box-pack: $value;
    -ms-flex-pack: $value;
  }
  justify-content: $value;
}

// Cross-axis Alignment
// flex-start | flex-end | center | baseline | stretch
@mixin align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -ms-flex-align: $value;
  }
  align-items: $value;
}
